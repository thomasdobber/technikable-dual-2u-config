/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &dual_2u_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <20 19>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <14 15 16>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <20 21 19>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 10 11 19 20 21 22 23 31 32 33 34 35 38 41 42 43 40 30 18 6>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 16 27 28 26 25 24 12 0 1 2 3 15 14 13 36 37 38 5 17 29 39 41>;
        };

        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB          &kp Q  &kp W     &kp E     &kp R      &kp T         &kp Y  &kp U             &kp I              &kp O    &kp P     &kp BSPC
&mt LCTRL ESC    &kp A  &kp S     &kp D     &kp F      &kp G         &kp H  &kp J             &kp K              &kp L    &kp SEMI  &kp SQT
&mt LSHFT GRAVE  &kp Z  &kp X     &kp C     &kp V      &kp B         &kp N  &kp M             &kp COMMA          &kp DOT  &kp FSLH  &mt RSHFT BACKSLASH
                        &kp LALT  &kp LGUI  &kp SPACE         &mo 1         &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;
        };

        sym_layer {
            bindings = <
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans          &trans     &kp MINUS         &kp UP    &kp EQUAL  &trans    &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans          &kp GRAVE  &kp LEFT          &kp DOWN  &kp RIGHT  &kp BSLH  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans          &trans     &kp SINGLE_QUOTE  &kp LBKT  &kp RBKT   &trans    &trans
                &trans  &trans  &kp N0          &trans             &trans            &trans
            >;

            label = "SYM";
        };

        bluetooth_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans          &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans        &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                            &trans        &trans        &trans                &trans          &trans  &trans
            >;

            label = "BLT";
        };
    };
};
